// Code generated by MockGen. DO NOT EDIT.
// Source: app/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "message-system/app/domain"
	types "message-system/app/types"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockCacheService is a mock of CacheService interface.
type MockCacheService struct {
	ctrl     *gomock.Controller
	recorder *MockCacheServiceMockRecorder
}

// MockCacheServiceMockRecorder is the mock recorder for MockCacheService.
type MockCacheServiceMockRecorder struct {
	mock *MockCacheService
}

// NewMockCacheService creates a new mock instance.
func NewMockCacheService(ctrl *gomock.Controller) *MockCacheService {
	mock := &MockCacheService{ctrl: ctrl}
	mock.recorder = &MockCacheServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheService) EXPECT() *MockCacheServiceMockRecorder {
	return m.recorder
}

// Set mocks base method.
func (m *MockCacheService) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheServiceMockRecorder) Set(ctx, key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacheService)(nil).Set), ctx, key, value, expiration)
}

// MockWebhookClient is a mock of WebhookClient interface.
type MockWebhookClient struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookClientMockRecorder
}

// MockWebhookClientMockRecorder is the mock recorder for MockWebhookClient.
type MockWebhookClientMockRecorder struct {
	mock *MockWebhookClient
}

// NewMockWebhookClient creates a new mock instance.
func NewMockWebhookClient(ctrl *gomock.Controller) *MockWebhookClient {
	mock := &MockWebhookClient{ctrl: ctrl}
	mock.recorder = &MockWebhookClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookClient) EXPECT() *MockWebhookClientMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockWebhookClient) SendMessage(ctx context.Context, message *domain.Message) (*types.MessageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, message)
	ret0, _ := ret[0].(*types.MessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockWebhookClientMockRecorder) SendMessage(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockWebhookClient)(nil).SendMessage), ctx, message)
}

// MockMessageRepository is a mock of MessageRepository interface.
type MockMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryMockRecorder
}

// MockMessageRepositoryMockRecorder is the mock recorder for MockMessageRepository.
type MockMessageRepositoryMockRecorder struct {
	mock *MockMessageRepository
}

// NewMockMessageRepository creates a new mock instance.
func NewMockMessageRepository(ctrl *gomock.Controller) *MockMessageRepository {
	mock := &MockMessageRepository{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepository) EXPECT() *MockMessageRepositoryMockRecorder {
	return m.recorder
}

// GetSentMessages mocks base method.
func (m *MockMessageRepository) GetSentMessages(ctx context.Context) ([]domain.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSentMessages", ctx)
	ret0, _ := ret[0].([]domain.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSentMessages indicates an expected call of GetSentMessages.
func (mr *MockMessageRepositoryMockRecorder) GetSentMessages(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentMessages", reflect.TypeOf((*MockMessageRepository)(nil).GetSentMessages), ctx)
}

// GetUnsentMessages mocks base method.
func (m *MockMessageRepository) GetUnsentMessages(ctx context.Context, limit int) ([]domain.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnsentMessages", ctx, limit)
	ret0, _ := ret[0].([]domain.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnsentMessages indicates an expected call of GetUnsentMessages.
func (mr *MockMessageRepositoryMockRecorder) GetUnsentMessages(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnsentMessages", reflect.TypeOf((*MockMessageRepository)(nil).GetUnsentMessages), ctx, limit)
}

// MarkAsSent mocks base method.
func (m *MockMessageRepository) MarkAsSent(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsSent", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsSent indicates an expected call of MarkAsSent.
func (mr *MockMessageRepositoryMockRecorder) MarkAsSent(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsSent", reflect.TypeOf((*MockMessageRepository)(nil).MarkAsSent), ctx, id)
}
